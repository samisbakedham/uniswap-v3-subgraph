// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class IncentiveId__computeInputKeyStruct extends ethereum.Tuple {
  get rewardToken(): Address {
    return this[0].toAddress();
  }

  get pool(): Address {
    return this[1].toAddress();
  }

  get startTime(): BigInt {
    return this[2].toBigInt();
  }

  get endTime(): BigInt {
    return this[3].toBigInt();
  }

  get refundee(): Address {
    return this[4].toAddress();
  }
}

export class IncentiveId extends ethereum.SmartContract {
  static bind(address: Address): IncentiveId {
    return new IncentiveId("IncentiveId", address);
  }

  compute(key: IncentiveId__computeInputKeyStruct): Bytes {
    let result = super.call(
      "compute",
      "compute((address,address,uint256,uint256,address)):(bytes32)",
      [ethereum.Value.fromTuple(key)]
    );

    return result[0].toBytes();
  }

  try_compute(
    key: IncentiveId__computeInputKeyStruct
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "compute",
      "compute((address,address,uint256,uint256,address)):(bytes32)",
      [ethereum.Value.fromTuple(key)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}
